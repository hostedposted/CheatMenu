{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"<p>Chenu makes creating cheat menus easy. You can have a beautiful menu with just a few lines of code.</p>","title":"Chenu"},{"location":"#what-is-chenu","text":"<p>Chenu is a library that allows you to create a cheat menu with ease. It is very easy to use and has a lot of features. Your cheat menu will look very professional and will be easy to use. It is incredibly easy to add on hacks and toggle hacks. In addition, there is a built-in alert system. Making it easy to ask for user input and display information to the user. The alert system uses SweetAlert2, which is a very customizable and easy-to-use alert system. In addition, Chenu has a really useful CLI. The CLI allows you to create a new cheat menu, start a developing server, and more. The CLI is very easy to use and will make your life easier. Chenu even allows a hot reloading cheat menu! When you use the command <code>chenu-cli dev</code>, a dev server will start. Whenever you make any changes to your cheat menu, the dev server will automatically build, then reload the cheat menu. This makes it very easy to develop your cheat menu. There is no reason not to use Chenu when building your next cheat menu! Learn how to create your cheat menu on the next page Getting Started.</p>","title":"What is Chenu?"},{"location":"#why-was-chenu-created","text":"<p>Prior, to Chenu's creation it was really hard to create a quality cheat menu. There were no libraries that made it easy to create a cheat menu. To create a quality cheat menu a lot of things are needed. These include but are not limited to the following:</p> <ul> <li>A good UI</li> <li>A good alert system</li> <li>Good styling</li> <li>Optimized bundle size</li> <li>Easy to use</li> <li>Easy to add hacks</li> </ul> <p>This was hard to achieve. Creating a good UI was hard without (p)react. Almost all alert systems use SweetAlert2. However, SweetAlert2 requires some more code by the user, this is why Chenu has a wrapper over SweetAlert2. Styling is also quite annoying to do. Having a good hack-adding system is also quite challenging to create. All of these reasons and more are why Chenu was created. The goal of Chenu is for more people to create cheat menu's so games will have better security/anti-cheat. I have had plans for cheat menus but not enough time to create them. Chenu will make it easier for me to create cheat menus. I hope Chenu will make it easier for you to create cheat menus too!</p>","title":"Why was Chenu created?"},{"location":"getting-started/","text":"<p>Creating a cheat menu is really easy.</p>","title":"Getting Started"},{"location":"getting-started/#pre-requirements","text":"<p>To create a cheat menu, you need to have the following:</p> <ul> <li>Node.js (v12.0.0 or higher)</li> <li>npm (v6.0.0 or higher), yarn (v1.0.0 or higher), or pnpm (v3.0.0 or higher)</li> </ul>","title":"Pre Requirements"},{"location":"getting-started/#installing-the-cli","text":"<p>Generating a cheat menu is easy. First, you need to install the CLI. To install the CLI, run the following command:</p> <pre><code>npm install -g chenu-cli\n</code></pre> <p>Now let's create a cheat menu!</p>","title":"Installing the CLI"},{"location":"getting-started/#creating-a-cheat-menu","text":"<p>To create a cheat menu, run the following command:</p> <pre><code>chenu-cli init\n</code></pre> <p>You will be asked a few questions. Answer them and you will have a cheat menu!</p> <p>Now, you can start adding hacks!</p>","title":"Creating a Cheat Menu"},{"location":"setup/adding-hacks/","text":"<p>Adding hacks is simple! To start you will need to add a category.</p>","title":"Adding Hacks"},{"location":"setup/adding-hacks/#adding-categories","text":"<p>In the cheat menu directory, there will be a configuration file called <code>cheat-menu-config.js</code>.</p> <p>It will look something like this:</p> cheat-menu-config.js<pre><code>/** @type {import(\"chenu-cli\").Config} */\nexport const config = {\n    title: \"Example Cheat Menu\",\n    categories: []\n}\n</code></pre> <p>In the <code>categories</code> array, you can add categories. A category should be a string. For example:</p> cheat-menu-config.js<pre><code>/** @type {import(\"chenu-cli\").Config} */\nexport const config = {\n    title: \"Example Cheat Menu\",\n    categories: [\"Example Category\"]\n}\n</code></pre> <p>Once you have added the category to the configuration file, you need to create a file for the category. Under the <code>src</code> directory, there should be a <code>hacks</code> directory. This is the directory where you will have your category code. Create a file with the name of the category. For this example, we will name the file <code>example.ts</code>. The file should look something like this:</p> src/hacks/example.ts<pre><code>import { success, withCategory } from \"chenu\"\n\nwithCategory(\"Example Category\", ({ hack, toggle, shouldShow }) =&gt; {\n\n})\n</code></pre> <p>The <code>withCategory</code> function takes two arguments. The first argument is the category name. The second argument is a function that takes an object with the following properties:</p> <ul> <li><code>hack</code>: A function that takes the hack's name, description and function. The function is the hack code. The hack code is run when the hack is clicked.</li> <li><code>toggle</code>: A function that takes the toggle's name, and function. The function is the toggle code. The toggle code is run when the toggle is clicked. The function gets a boolean as an argument. The boolean is <code>true</code> if the toggle is on, and <code>false</code> if the toggle is off.</li> <li><code>shouldShow</code>: A function that takes a function. The function taken as the parameter is used to decide if the category should be shown. This can be useful if you are making a cheat menu for a game with different game modes. For example, if you are making a cheat menu for a trivia game with single-player and team modes, you can use this function to only show the category if the game mode is single-player.</li> </ul>","title":"Adding Categories"},{"location":"setup/adding-hacks/#adding-hacks_1","text":"<p>To add a hack, you will need to use the <code>hack</code> function. The <code>hack</code> function takes three arguments. The first argument is the hack's name. The second argument is the hack's description. The third argument is the hack code. The hack code is run when the hack is clicked. For example:</p> src/hacks/example.ts<pre><code>import { success, withCategory } from \"chenu\"\n\nwithCategory(\"Example Category\", ({ hack, toggle, shouldShow }) =&gt; {\n    hack(\"Example Hack\", \"This is an example hack\", () =&gt; {\n        success(\"This is an example hack!\")\n    })\n})\n</code></pre> <p>This will create a cheat menu looking like this:</p> Before ClickingAfter Clicking   <p></p>   <p></p>","title":"Adding Hacks"},{"location":"setup/adding-hacks/#adding-toggles","text":"<p>To add a toggle, you will need to use the <code>toggle</code> function. The <code>toggle</code> function takes two arguments. The first argument is the toggle's name. The second argument is the toggle code. The toggle code is run when the toggle is clicked. The toggle code gets a boolean as an argument. The boolean is <code>true</code> if the toggle is on, and <code>false</code> if the toggle is off. For example:</p> src/hacks/example.ts<pre><code>import { success, withCategory } from \"chenu\"\n\nwithCategory(\"Example Category\", ({ hack, toggle, shouldShow }) =&gt; {\n    toggle(\"Example Toggle\", (on) =&gt; {\n        if (on) {\n            success(\"The toggle is on!\")\n        } else {\n            success(\"The toggle is off!\")\n        }\n    })\n})\n</code></pre> <p>This will create a cheat menu looking like this:</p> Before ClickingToggling OnToggling Off   <p></p>   <p></p>   <p></p>","title":"Adding Toggles"}]}